{"version":3,"sources":["webpack:///./src/components/miscellaneous/Numeraljs.vue?9a4b","webpack:///src/components/miscellaneous/Numeraljs.vue","webpack:///./src/components/miscellaneous/Numeraljs.vue?5de3","webpack:///./src/components/miscellaneous/Numeraljs.vue","webpack:///./node_modules/numeral/numeral.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","_m","_v","staticClass","attrs","_s","example1","example2","example3","example4","example5","staticRenderFns","name","metaInfo","title","data","numeral","format","component","global","factory","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray"],"mappings":"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","file":"js/chunk-26b8d264.0f660589.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._m(0),_vm._v(\" \"),_c('hr',{staticClass:\"container-m-nx border-light mt-0 mb-4\"}),_vm._v(\" \"),_c('b-card',{attrs:{\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"demo-vertical-spacing\"},[_c('p',[_vm._v(_vm._s(_vm.example1))]),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.example2))]),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.example3))]),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.example4))]),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.example5))])])],1)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',{staticClass:\"font-weight-bold py-3 mb-4\"},[_c('span',{staticClass:\"text-muted font-weight-light\"},[_vm._v(\"Miscellaneous /\")]),_vm._v(\" Numeral.js\\n  \")])}]\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <h4 class=\"font-weight-bold py-3 mb-4\">\n      <span class=\"text-muted font-weight-light\">Miscellaneous /</span> Numeral.js\n    </h4>\n\n    <hr class=\"container-m-nx border-light mt-0 mb-4\">\n\n    <b-card no-body>\n      <b-card-body class=\"demo-vertical-spacing\">\n        <p>{{ example1 }}</p>\n        <p>{{ example2 }}</p>\n        <p>{{ example3 }}</p>\n        <p>{{ example4 }}</p>\n        <p>{{ example5 }}</p>\n      </b-card-body>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport * as numeral from 'numeral'\n\nexport default {\n  name: 'miscellaneous-numeraljs',\n  metaInfo: {\n    title: 'Numeral.js - Miscellaneous'\n  },\n  data: () => ({\n    example1: numeral(1000.1234).format('0,0'),\n    example2: numeral(1000.1234).format('0,0.00'),\n    example3: numeral(1000.1234).format('+0,0'),\n    example4: numeral(1000.1234).format('.00'),\n    example5: numeral(1000.1234).format('$0,0.00')\n  })\n}\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Numeraljs.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Numeraljs.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Numeraljs.vue?vue&type=template&id=5a333c8a&\"\nimport script from \"./Numeraljs.vue?vue&type=script&lang=js&\"\nexport * from \"./Numeraljs.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"sourceRoot":""}